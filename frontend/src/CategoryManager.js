import React, { useState } from 'react';
import './CategoryManager.css';

// Emoji categories for the emoji picker
const EMOJI_CATEGORIES = {
  'Food & Drink': ['üçî', 'üçï', 'üçù', 'üçú', 'üç≤', 'ü•ó', 'üç±', 'üç£', 'üç§', 'ü•ü', 'üçö', 'üçô', 'ü•ô', 'üåÆ', 'üåØ', 'ü•™', 'üçñ', 'ü•©', 'üçó', 'ü•ì', 'üçü', 'üçø', 'ü•®', 'ü•Ø', 'üßÄ', 'ü•û', 'üßá', 'üç∞', 'üéÇ', 'üßÅ', 'ü•ß', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üç©', 'üç™', 'üå∞', 'ü•ú', 'üçØ', 'ü•õ', 'üçº', '‚òï', 'üçµ', 'üßÉ', 'ü•§', 'üç∂', 'üçæ', 'üç∑', 'üç∏', 'üçπ', 'üç∫', 'üçª', 'ü•Ç', 'ü•É'],
  'Activities': ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõ∑', '‚õ∏Ô∏è', 'ü•å', 'üéø', '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', '‚õπÔ∏è', 'ü§∫', 'üèåÔ∏è', 'üèá', 'üßò', 'üèÑ', 'üèä', 'ü§Ω', 'üö£', 'üßó', 'üöµ', 'üö¥', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñÔ∏è', 'üèµÔ∏è', 'üéóÔ∏è', 'üé´', 'üéüÔ∏è', 'üé™', 'ü§π', 'üé≠', 'ü©∞', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéµ', 'üé∂', 'ü•Å', 'ü™ò', 'üéπ', 'üé∑', 'üé∫', 'ü™ó', 'üé∏', 'ü™ï', 'üéª'],
  'Travel & Places': ['üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üõª', 'üöö', 'üöõ', 'üöú', 'üèçÔ∏è', 'üõµ', 'üö≤', 'üõ¥', 'üõ∫', 'üö®', 'üöî', 'üöç', 'üöò', 'üöñ', 'üö°', 'üö†', 'üöü', 'üöÉ', 'üöã', 'üöû', 'üöù', 'üöÑ', 'üöÖ', 'üöà', 'üöÇ', 'üöÜ', 'üöá', 'üöä', 'üöâ', '‚úàÔ∏è', 'üõ´', 'üõ¨', 'üõ©Ô∏è', 'üí∫', 'üõ∞Ô∏è', 'üöÄ', 'üõ∏', 'üöÅ', 'üõ∂', '‚õµ', 'üö§', 'üõ•Ô∏è', 'üõ≥Ô∏è', '‚õ¥Ô∏è', 'üö¢', '‚öì', '‚õΩ', 'üöß', 'üö¶', 'üö•', 'üó∫Ô∏è', 'üóø', 'üóΩ', 'üóº', 'üè∞', 'üèØ', 'üèüÔ∏è', 'üé°', 'üé¢', 'üé†', '‚õ≤', '‚õ±Ô∏è', 'üèñÔ∏è', 'üèùÔ∏è', 'üèúÔ∏è', 'üåã', '‚õ∞Ô∏è', 'üèîÔ∏è', 'üóª', 'üèïÔ∏è', '‚õ∫', 'üõñ', 'üè†', 'üè°', 'üèòÔ∏è', 'üèöÔ∏è', 'üèóÔ∏è', 'üè≠', 'üè¢', 'üè¨', 'üè£', 'üè§', 'üè•', 'üè¶', 'üè®', 'üè™', 'üè´', 'üè©', 'üíí', 'üèõÔ∏è', '‚õ™', 'üïå', 'üõï', 'üïç', '‚õ©Ô∏è', 'üïã'],
  'Objects': ['‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è', 'üóúÔ∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üé•', 'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è', 'üéõÔ∏è', 'üß≠', '‚è±Ô∏è', '‚è≤Ô∏è', '‚è∞', 'üï∞Ô∏è', '‚åõ', '‚è≥', 'üì°', 'üîã', 'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'ü™î', 'üßØ', 'üõ¢Ô∏è', 'üí∏', 'üíµ', 'üí¥', 'üí∂', 'üí∑', 'ü™ô', 'üí∞', 'üí≥', 'üíé', '‚öñÔ∏è', 'üß∞', 'üîß', 'üî®', '‚öíÔ∏è', 'üõ†Ô∏è', '‚õèÔ∏è', 'üî©', '‚öôÔ∏è', 'üß±', '‚õìÔ∏è', 'üß≤', 'üî´', 'üí£', 'üß®', 'ü™ì', 'üî™', '‚öîÔ∏è', 'üõ°Ô∏è', 'üö¨', '‚ö∞Ô∏è', 'ü™¶', '‚ö±Ô∏è', 'üè∫', 'üîÆ', 'üìø', 'üßø', 'üíà', '‚öóÔ∏è', 'üî≠', 'üî¨', 'üï≥Ô∏è', 'ü©π', 'ü©∫', 'üíä', 'üíâ', 'ü©∏', 'üß¨', 'ü¶†', 'üß´', 'üß™', 'üå°Ô∏è', 'üßπ', 'ü™£', 'üßΩ', 'üß¥', 'üõéÔ∏è', 'üîë', 'üóùÔ∏è', 'üö™', 'ü™ë', 'üõãÔ∏è', 'üõèÔ∏è', 'üõå', 'üß∏', 'ü™Ü', 'üñºÔ∏è', 'ü™û', 'ü™ü', 'üõçÔ∏è', 'üõí', 'üéÅ', 'üéà', 'üéè', 'üéÄ', 'ü™Ñ', 'ü™Ö'],
  'Symbols': ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥', 'üà∂', 'üàö', 'üà∏', 'üà∫', 'üà∑Ô∏è', '‚ú¥Ô∏è', 'üÜö', 'üíÆ', 'üâê', '„äôÔ∏è', '„äóÔ∏è', 'üà¥', 'üàµ', 'üàπ', 'üà≤', 'üÖ∞Ô∏è', 'üÖ±Ô∏è', 'üÜé', 'üÜë', 'üÖæÔ∏è', 'üÜò', '‚ùå', '‚≠ï', 'üõë', '‚õî', 'üìõ', 'üö´', 'üíØ', 'üí¢', '‚ô®Ô∏è', 'üö∑', 'üöØ', 'üö≥', 'üö±', 'üîû', 'üìµ', 'üö≠', '‚ùó', '‚ùï', '‚ùì', '‚ùî', '‚ÄºÔ∏è', '‚ÅâÔ∏è', 'üîÖ', 'üîÜ', '„ÄΩÔ∏è', '‚ö†Ô∏è', 'üö∏', 'üî±', '‚öúÔ∏è', 'üî∞', '‚ôªÔ∏è', '‚úÖ', 'üàØ', 'üíπ', '‚ùáÔ∏è', '‚ú≥Ô∏è', '‚ùé', 'üåê', 'üí†', '‚ìÇÔ∏è', 'üåÄ', 'üí§', 'üèß', 'üöæ', '‚ôø', 'üÖøÔ∏è', 'üõó', 'üà≥', 'üàÇÔ∏è', 'üõÇ', 'üõÉ', 'üõÑ', 'üõÖ', 'üöπ', 'üö∫', 'üöº', '‚ößÔ∏è', 'üöª', 'üöÆ', 'üé¶', 'üì∂', 'üàÅ', 'üî£', '‚ÑπÔ∏è', 'üî§', 'üî°', 'üî†', 'üÜñ', 'üÜó', 'üÜô', 'üÜí', 'üÜï', 'üÜì', '0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
};

const CategoryManager = ({ user, categories, colorPalette, loading, onCreateCategory, onUpdateCategory, onDeleteCategory, onRefresh }) => {
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingCategory, setEditingCategory] = useState(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    emoji: 'üìù',
    color: '#007AFF'
  });

  const handleCreateNew = () => {
    setFormData({ name: '', emoji: 'üìù', color: '#007AFF' });
    setEditingCategory(null);
    setShowCreateForm(true);
  };

  const handleEdit = (category) => {
    setFormData({
      name: category.name,
      emoji: category.emoji,
      color: category.color
    });
    setEditingCategory(category);
    setShowCreateForm(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.name.trim()) {
      alert('Please enter a category name');
      return;
    }

    try {
      if (editingCategory) {
        await onUpdateCategory(editingCategory.id, formData);
      } else {
        await onCreateCategory(formData);
      }
      setShowCreateForm(false);
      setEditingCategory(null);
      setFormData({ name: '', emoji: 'üìù', color: '#007AFF' });
    } catch (error) {
      console.error('Error submitting category:', error);
    }
  };

  const handleCancel = () => {
    setShowCreateForm(false);
    setEditingCategory(null);
    setFormData({ name: '', emoji: 'üìù', color: '#007AFF' });
  };

  const handleEmojiSelect = (emoji) => {
    setFormData({ ...formData, emoji });
    setShowEmojiPicker(false);
  };

  const handleColorSelect = (color) => {
    setFormData({ ...formData, color });
  };

  if (loading) {
    return (
      <div className="category-manager">
        <div className="loading">Loading categories...</div>
      </div>
    );
  }

  const systemCategories = categories.filter(cat => cat.is_system);
  const customCategories = categories.filter(cat => !cat.is_system);

  return (
    <div className="category-manager">
      <div className="category-manager-header">
        <h2>üè∑Ô∏è Category Management</h2>
        <div className="category-actions">
          <button onClick={onRefresh} className="refresh-btn" disabled={loading}>
            üîÑ Refresh
          </button>
          {(user?.role === 'owner' || user?.role === 'co_owner') && (
            <button onClick={handleCreateNew} className="create-category-btn">
              ‚ûï New Category
            </button>
          )}
        </div>
      </div>

      {showCreateForm && (
        <div className="category-form-modal">
          <div className="category-form">
            <h3>{editingCategory ? 'Edit Category' : 'Create New Category'}</h3>
            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label>Category Name</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  placeholder="Enter category name"
                  className="category-name-input"
                  required
                />
              </div>

              <div className="form-group">
                <label>Color</label>
                <div className="color-palette">
                  {colorPalette.map((color) => (
                    <button
                      key={color.value}
                      type="button"
                      className={`color-option ${formData.color === color.value ? 'selected' : ''}`}
                      style={{ backgroundColor: color.value }}
                      onClick={() => handleColorSelect(color.value)}
                      title={color.name}
                    />
                  ))}
                </div>
              </div>

              <div className="form-group">
                <label>Emoji</label>
                <div className="emoji-selector">
                  <button
                    type="button"
                    className="emoji-display"
                    onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                  >
                    {formData.emoji}
                  </button>
                  {showEmojiPicker && (
                    <div className="emoji-picker">
                      {Object.entries(EMOJI_CATEGORIES).map(([categoryName, emojis]) => (
                        <div key={categoryName} className="emoji-category">
                          <h4>{categoryName}</h4>
                          <div className="emoji-grid">
                            {emojis.map((emoji) => (
                              <button
                                key={emoji}
                                type="button"
                                className="emoji-option"
                                onClick={() => handleEmojiSelect(emoji)}
                              >
                                {emoji}
                              </button>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>

              <div className="form-actions">
                <button type="submit" className="submit-btn">
                  {editingCategory ? 'Update Category' : 'Create Category'}
                </button>
                <button type="button" onClick={handleCancel} className="cancel-btn">
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      <div className="categories-section">
        <h3>System Categories</h3>
        <div className="categories-grid">
          {systemCategories.map((category) => (
            <div key={category.id} className="category-card system">
              <div className="category-header">
                <div className="category-icon" style={{ backgroundColor: category.color }}>
                  {category.emoji}
                </div>
                <div className="category-info">
                  <h4>{category.name}</h4>
                  <span className="category-type">System Default</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="categories-section">
        <h3>Custom Categories ({customCategories.length})</h3>
        {customCategories.length === 0 ? (
          <div className="no-categories">
            <p>No custom categories created yet.</p>
            {(user?.role === 'owner' || user?.role === 'co_owner') && (
              <button onClick={handleCreateNew} className="create-first-category-btn">
                Create Your First Category
              </button>
            )}
          </div>
        ) : (
          <div className="categories-grid">
            {customCategories.map((category) => (
              <div key={category.id} className="category-card custom">
                <div className="category-header">
                  <div className="category-icon" style={{ backgroundColor: category.color }}>
                    {category.emoji}
                  </div>
                  <div className="category-info">
                    <h4>{category.name}</h4>
                    <span className="category-type">Custom</span>
                  </div>
                </div>
                {(user?.role === 'owner' || user?.role === 'co_owner') && (
                  <div className="category-actions">
                    <button 
                      onClick={() => handleEdit(category)}
                      className="edit-category-btn"
                      title="Edit category"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button 
                      onClick={() => onDeleteCategory(category.id)}
                      className="delete-category-btn"
                      title="Delete category"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default CategoryManager;